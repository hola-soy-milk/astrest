---
import Layout from "../layouts/Layout.astro";
import Card from "../components/Card.astro";
import { getCollection } from "astro:content";
import { Image } from "astro:assets";
import ogs from "open-graph-scraper";
import RandomTalk from "../components/RandomTalk.jsx";
import ramonImg from "../assets/ramon.jpg";
const talks = await getCollection("talks");

const me = {
  name: "RamÃ³n Huidobro",
  githubUsername: "hola-soy-milk",
};

const repoParams = {
  sort: "created",
  direction: "descending",
};

type OGImage = {
  height?: number;
  width?: number;
  type: string;
  url: string;
};

const response = await fetch(
  `https://api.github.com/users/${
    me.githubUsername
  }/repos?${new URLSearchParams(repoParams).toString()}`,
  {
    headers: { Authentication: `token ${import.meta.env.GH_TOKEN}` },
  }
);
const repos: [{ name: string; description: string; html_url: string }] =
  await response.json();
console.log(repos);

const reposWithImages: {
  name: string;
  description: string;
  html_url: string;
  ogImage: OGImage;
}[] = await Promise.all(
  repos.map(
    async (repo: { name: string; description: string; html_url: string }) => {
      const { result } = await ogs({ url: repo.html_url });
      return { ...repo, ogImage: result.ogImage[0] };
    }
  )
);
---

<Layout title="Welcome to Astro.">
  <main>
    <RandomTalk client:load talks={talks} />
    <Image src={ramonImg} height={300} width={300} alt="Picture of me" />
    <p class="instructions">
      To get started, open the directory <code>src/pages</code> in your project.<br
      />
      <strong>Code Challenge:</strong> Tweak the "Welcome to Astro" message above.
    </p>
    <h2>Projects on GitHub</h2>
    <ul role="list" class="link-card-grid">
      {
        reposWithImages.map(
          ({
            ogImage: { url, height, width },
            name,
            description,
            html_url,
          }) => (
            <a href={html_url}>
              <Image
                src={url}
                height={Number(height)}
                width={Number(width)}
                alt={name}
              />
            </a>
          )
        )
      }
    </ul>
  </main>
</Layout>

<style>
  img {
    object-fit: cover;
    max-width: 100%;
    height: auto;
    vertical-align: middle;
    border-radius: 5px;
  }
  main {
    margin: auto;
    padding: 1.5rem;
    max-width: 60ch;
  }
  h1 {
    font-size: 3rem;
    font-weight: 800;
    margin: 0;
  }
  .text-gradient {
    background-image: var(--accent-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 400%;
    background-position: 0%;
  }
  .instructions {
    line-height: 1.6;
    margin: 1rem 0;
    border: 1px solid rgba(var(--accent), 25%);
    background-color: white;
    padding: 1rem;
    border-radius: 0.4rem;
  }
  .instructions code {
    font-size: 0.875em;
    font-weight: bold;
    background: rgba(var(--accent), 12%);
    color: rgb(var(--accent));
    border-radius: 4px;
    padding: 0.3em 0.45em;
  }
  .instructions strong {
    color: rgb(var(--accent));
  }
  .link-card-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
    gap: 1rem;
    padding: 0;
  }
</style>
